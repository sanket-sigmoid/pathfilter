# This code is licensed from CircleCI to the user under the MIT license.
# See here for details: https://circleci.com/developer/orbs/licensing
version: 2.1
description: |
    Continue a pipeline based on paths of changed files.
display:
    home_url: https://github.com/CircleCI-Public/path-filtering-orb
    source_url: https://github.com/CircleCI-Public/path-filtering-orb
orbs:
    continuation: circleci/continuation@0.2.0
commands:
    set-parameters:
        description: |
            Generates a set of pipeline parameters from `mapping` at `output-path`.
        parameters:
            base-revision:
                default: main
                description: |
                    The revision to compare the current one against for the purpose of determining changed files.
                type: string
            mapping:
                default: ""
                description: |
                    Mapping of path regular expressions to pipeline parameters and values. One mapping per line, whitespace-delimited.
                type: string
            output-path:
                default: /tmp/pipeline-parameters.json
                description: |
                    Path to save the generated parameters to.
                type: string
        steps:
            - run:
                command: |+
                    #!/usr/bin/env python3

                    import json
                    import os
                    import re
                    import subprocess

                    def checkout(revision):
                      """
                      Helper function for checking out a branch

                      :param revision: The revision to checkout
                      :type revision: str
                      """
                      subprocess.run(
                        ['git', 'checkout', revision],
                        check=True
                      )

                    output_path = os.environ.get('OUTPUT_PATH')
                    head = os.environ.get('CIRCLE_SHA1')
                    base_revision = os.environ.get('BASE_REVISION')
                    checkout(base_revision)  # Checkout base revision to make sure it is available for comparison
                    checkout(head)  # return to head commit

                    base = subprocess.run(
                      ['git', 'merge-base', base_revision, head],
                      check=True,
                      capture_output=True
                    ).stdout.decode('utf-8').strip()

                    if head == base:
                      try:
                        # If building on the same branch as BASE_REVISION, we will get the
                        # current commit as merge base. In that case try to go back to the
                        # first parent, i.e. the last state of this branch before the
                        # merge, and use that as the base.
                        base = subprocess.run(
                          ['git', 'rev-parse', 'HEAD~1'], # FIXME this breaks on the first commit, fallback to something
                          check=True,
                          capture_output=True
                        ).stdout.decode('utf-8').strip()
                      except:
                        # This can fail if this is the first commit of the repo, so that
                        # HEAD~1 actually doesn't resolve. In this case we can compare
                        # against this magic SHA below, which is the empty tree. The diff
                        # to that is just the first commit as patch.
                        base = '4b825dc642cb6eb9a060e54bf8d69288fbee4904'

                    print('Comparing {}...{}'.format(base, head))
                    changes = subprocess.run(
                      ['git', 'diff', '--name-only', base, head],
                      check=True,
                      capture_output=True
                    ).stdout.decode('utf-8').splitlines()

                    mappings = [
                      m.split() for m in
                      os.environ.get('MAPPING').splitlines()
                    ]

                    def check_mapping(m):
                      if 3 != len(m):
                        raise Exception("Invalid mapping")
                      path, param, value = m
                      regex = re.compile(r'^' + path + r'$')
                      for change in changes:
                        if regex.match(change):
                          return True
                      return False

                    def convert_mapping(m):
                      return [m[1], json.loads(m[2])]

                    mappings = filter(check_mapping, mappings)
                    mappings = map(convert_mapping, mappings)
                    mappings = dict(mappings)

                    with open(output_path, 'w') as fp:
                      fp.write(json.dumps(mappings))

                environment:
                    BASE_REVISION: << parameters.base-revision >>
                    MAPPING: << parameters.mapping >>
                    OUTPUT_PATH: << parameters.output-path >>
                name: Set parameters
                shell: /usr/bin/env python3
executors:
    default:
        description: |
            This is a sample executor using Docker and Python.
        docker:
            - image: cimg/python:<<parameters.tag>>
        parameters:
            tag:
                default: "3.8"
                description: |
                    Pick a specific circleci/python image variant: https://hub.docker.com/r/cimg/python/tags
                type: string
jobs:
    filter:
        description: |
            Continues a pipeline in the `setup` state based with static config and a set of pipeline parameters based on the changes in this push.
        executor:
            name: default
            tag: << parameters.tag >>
        parameters:
            base-revision:
                default: main
                description: |
                    The revision to compare the current one against for the purpose of determining changed files.
                type: string
            circleci_domain:
                default: circleci.com
                description: The domain of the CircleCI installation - defaults to circleci.com. (Only necessary for CircleCI Server users)
                type: string
            config-path:
                default: .circleci/continue_config.yml
                description: |
                    The location of the config to continue the pipeline with.
                type: string
            mapping:
                default: ""
                description: |
                    Mapping of path regular expressions to pipeline parameters and values. One mapping per line, whitespace-delimited.
                type: string
            resource_class:
                default: small
                description: Resource class to use
                type: string
            tag:
                default: "3.8"
                description: |
                    Pick a specific circleci/python image variant: https://hub.docker.com/r/cimg/python/tags
                type: string
            workspace_path:
                default: ""
                description: Path to attach the workspace to
                type: string
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - when:
                condition:
                    not:
                        equal:
                            - ""
                            - << parameters.workspace_path >>
                steps:
                    - attach_workspace:
                        at: << parameters.workspace_path >>
            - set-parameters:
                base-revision: << parameters.base-revision >>
                mapping: << parameters.mapping >>
            - continuation/continue:
                circleci_domain: << parameters.circleci_domain >>
                configuration_path: << parameters.config-path >>
                parameters: /tmp/pipeline-parameters.json
examples:
    example:
        description: |
            Continue a pipeline from the setup phase with supplied configuration and pipeline parameters generated from the files changed.
        usage:
            version: "2.1"
            orbs:
                path-filtering: circleci/path-filtering@0.0.1
            workflows:
                generate-config:
                    jobs:
                        - path-filtering/filter:
                            base-revision: main
                            config-path: .circleci/continue-config.yml
                            mapping: |
                                src/.* build-code true 
                                doc/.* build-docs true


version: 2.1
setup: true
orbs:
  path-filtering: circleci/path-filtering@0.1.1
  continuation: circleci/continuation@0.2.0
  
parameters:
  manual-workflow-a:
    type: boolean
    default: false 
  manual-workflow-b:
    type: boolean
    default: false
  manual-workflow-c:
    type: boolean
    default: false
  manual-workflow-d:
    type: boolean
    default: false
  run-workflow-a:
    type: boolean
    default: false
  run-workflow-b:
    type: boolean
    default: false
  run-workflow-c:
    type: boolean
    default: false
  run-workflow-d:
    type: boolean
    default: false
    
workflows:
  setup:
    unless:
      or: [<< pipeline.parameters.manual-workflow-a >>, << pipeline.parameters.manual-workflow-a >>, <<pipeline.parameters.manual-workflow-c>>,  <<pipeline.parameters.manual-workflow-d>>]
    jobs:
      - path-filtering/filter:
          base-revision: << pipeline.git.branch >>
          config-path:  .circleci/continue_config.yml
          mapping: |
            dir_a/.* run-workflow-a true
            dir_b/.* run-workflow-b true
            dir_c/.* run-workflow-c true
            dir_d/.* run-workflow-d true
  setup-a:
    when: 
      or: [<< pipeline.parameters.run-workflow-a >>]
    jobs:
      - continuation/continue:
          configuration_path: dir_a/.circleci/workflows.yml
          parameters: /tmp/pipeline-parameters.json
          pre-steps:
            - run:
                command: |
                  echo '{ "run-workflow-a": << pipeline.parameters.manual-workflow-a >> }' >> /tmp/pipeline-parameters.json
  setup-b:
    when: 
      or: [<< pipeline.parameters.run-workflow-b >> ]
    jobs:
      - continuation/continue:
          configuration_path: dir_b/.circleci/workflows.yml
          parameters: /tmp/pipeline-parameters.json
          pre-steps:
            - run:
                command: |
                  echo '{ "run-workflow-b": << pipeline.parameters.manual-workflow-b >> }' >> /tmp/pipeline-parameters.json
  setup-c:
    when: 
      or: [<< pipeline.parameters.run-workflow-c >>]
    jobs:
      - continuation/continue:
          configuration_path: dir_c/.circleci/workflows.yml
          parameters: /tmp/pipeline-parameters.json
          pre-steps:
            - run:
                command: |
                  echo '{ "run-workflow-c": << pipeline.parameters.manual-workflow-c >>}' >> /tmp/pipeline-parameters.json
  setup-d:
    when: 
      or: [<<pipeline.parameters.run-workflow-d>>]
    jobs:
      - continuation/continue:
          configuration_path: dir_d/workflows.yml
          parameters: /tmp/pipeline-parameters.json
          pre-steps:
            - run:
                command: |
                  echo '{ "run-workflow-d": << pipeline.parameters.manual-workflow-d >> }' >> /tmp/pipeline-parameters.json
